/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three';
import React from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useMaterialColorValue } from 'src/globStates/materialColorState';

type GLTFResult = GLTF & {
  nodes: {
    Back_Down: THREE.Mesh;
    Back_Little_Part: THREE.Mesh;
    Back_Mid: THREE.Mesh;
    Back_Top_: THREE.Mesh;
    Central_: THREE.Mesh;
    Circle: THREE.Mesh;
    Down_With_Holes: THREE.Mesh;
    Front_part_: THREE.Mesh;
    Front_With_Holes: THREE.Mesh;
    Inserts: THREE.Mesh;
    Label_Front: THREE.Mesh;
    Logo: THREE.Mesh;
    Main_sole: THREE.Mesh;
    Middle_With_Holes: THREE.Mesh;
    Nike_: THREE.Mesh;
    Nike_Logo: THREE.Mesh;
    Seams: THREE.Mesh;
    Shoelace: THREE.Mesh;
    Tongue: THREE.Mesh;
    Top_Round_: THREE.Mesh;
    Tubes: THREE.Mesh;
    Under_feet: THREE.Mesh;
    Under_Sole_Plate: THREE.Mesh;
  };
  materials: {
    Foxing: THREE.MeshStandardMaterial;
    HealOverlay: THREE.MeshStandardMaterial;
    Heal: THREE.MeshStandardMaterial;
    Quarter: THREE.MeshStandardMaterial;
    Sole: THREE.MeshStandardMaterial;
    QuarterOverlay: THREE.MeshStandardMaterial;
    Tip: THREE.MeshStandardMaterial;
    Vamp: THREE.MeshStandardMaterial;
    Label: THREE.MeshStandardMaterial;
    Logo: THREE.MeshStandardMaterial;
    Eyestay: THREE.MeshStandardMaterial;
    Swoosh: THREE.MeshStandardMaterial;
    Midsole: THREE.MeshStandardMaterial;
    Laces: THREE.MeshStandardMaterial;
    Tongue: THREE.MeshStandardMaterial;
    Main: THREE.MeshStandardMaterial;
  };
};

/** glbファイルのパス */
const MODEL_PATH = '/assets/aj1.glb';

export const Model = (props: JSX.IntrinsicElements['group']) => {
  const { nodes, materials } = useGLTF(MODEL_PATH) as unknown as GLTFResult;
  return (
    <group {...props} dispose={null} position={[0, 0.47, 0]}>
      <mesh
        geometry={nodes.Back_Down.geometry}
        material={materials.Foxing}
        material-color={useMaterialColorValue().foxing?.color}
        position={[1.3, -0.31, -0.14]}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <mesh
        geometry={nodes.Back_Little_Part.geometry}
        material={materials.Foxing}
        material-color={useMaterialColorValue().foxing?.color}
        position={[1.62, 0.36, -0.18]}
        rotation={[1.56, 0.07, Math.PI / 2]}
      />
      <mesh
        geometry={nodes.Back_Mid.geometry}
        material={materials.HealOverlay}
        material-color={useMaterialColorValue().healOverlay?.color}
        position={[0.87, 0.68, -0.07]}
        rotation={[0, -1.57, 0]}
      />
      <mesh
        geometry={nodes.Back_Top_.geometry}
        material={materials.Heal}
        material-color={useMaterialColorValue().heal?.color}
        position={[1.04, 1.01, -0.09]}
        rotation={[Math.PI, -0.26, Math.PI]}
      />
      <mesh
        geometry={nodes.Central_.geometry}
        material={materials.Quarter}
        material-color={useMaterialColorValue().quarter?.color}
        position={[0.44, -0.08, 0.017]}
        rotation={[Math.PI, -0.34, Math.PI]}
      />
      <mesh
        geometry={nodes.Circle.geometry}
        material={materials.Sole}
        material-color={useMaterialColorValue().sole?.color}
        position={[-1.34, -1.1, -0.25]}
        rotation={[Math.PI / 2, 0, -2.05]}
      />
      <mesh
        geometry={nodes.Down_With_Holes.geometry}
        material={materials.QuarterOverlay}
        material-color={useMaterialColorValue().quarterOverlay?.color}
        position={[-0.88, -0.24, 0.14]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
      />
      <mesh
        geometry={nodes.Front_part_.geometry}
        material={materials.Tip}
        material-color={useMaterialColorValue().tip?.color}
        position={[-1.64, -0.55, 0.04]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
      />
      <mesh
        geometry={nodes.Front_With_Holes.geometry}
        material={materials.Vamp}
        material-color={useMaterialColorValue().vamp?.color}
        position={[-1.66, -0.32, 0.05]}
        rotation={[0, -1.57, 0]}
      />
      <mesh
        geometry={nodes.Inserts.geometry}
        material={materials.Heal}
        material-color={useMaterialColorValue().heal?.color}
        position={[0.58, 0.39, -0.06]}
        rotation={[Math.PI, -0.34, Math.PI]}
      />
      <mesh
        geometry={nodes.Label_Front.geometry}
        material={materials.Label}
        material-color={useMaterialColorValue().label?.color}
        position={[0.24, 1.42, 0.04]}
        rotation={[1.6, -0.91, 1.6]}
      />
      <mesh
        geometry={nodes.Logo.geometry}
        material={materials.Logo}
        material-color={useMaterialColorValue().logo?.color}
        position={[0.85, 0.66, 0.57]}
        rotation={[0.11, 0.21, -0.36]}
      />
      <mesh
        geometry={nodes.Main_sole.geometry}
        material={materials.Sole}
        material-color={useMaterialColorValue().sole?.color}
        position={[-0.41, -1.08, -0.03]}
        rotation={[Math.PI / 2, 0, -2.05]}
      />
      <mesh
        geometry={nodes.Middle_With_Holes.geometry}
        material={materials.Eyestay}
        material-color={useMaterialColorValue().eyestay?.color}
        position={[-0.04, 0.54, 0.03]}
        rotation={[Math.PI / 2, 0.6, -Math.PI]}
      />
      <mesh
        geometry={nodes.Nike_.geometry}
        material={materials.Swoosh}
        material-color={useMaterialColorValue().swoosh?.color}
        position={[0.75, 0, -0.083]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
      />
      <mesh
        geometry={nodes.Nike_Logo.geometry}
        material={materials.Sole}
        material-color={useMaterialColorValue().sole?.color}
        position={[-0.18, -1.1, 0.12]}
        rotation={[Math.PI / 2, 0, -2.05]}
      />
      <mesh
        geometry={nodes.Seams.geometry}
        material={materials.Midsole}
        material-color={useMaterialColorValue().midsole?.color}
        position={[-0.4, -0.75, -0.01]}
        rotation={[-1.57, -0.02, -1.57]}
        scale={0.04}
      />
      <mesh
        geometry={nodes.Shoelace.geometry}
        material={materials.Main}
        position={[-0.43, 0.36, 0.05]}
        rotation={[-Math.PI, 1.56, -Math.PI]}
      />
      <mesh
        geometry={nodes.Tongue.geometry}
        material={materials.Tongue}
        material-color={useMaterialColorValue().tongue?.color}
        position={[-0.01, 0.59, 0.06]}
        rotation={[Math.PI / 2, -1.02, Math.PI / 2]}
      />
      <mesh
        geometry={nodes.Top_Round_.geometry}
        material={materials.Main}
        position={[0.92, 1.18, -0.08]}
        rotation={[Math.PI, -0.26, Math.PI]}
      />
      <mesh
        geometry={nodes.Tubes.geometry}
        material={materials.Sole}
        material-color={useMaterialColorValue().sole?.color}
        position={[-1.38, -1.07, -0.01]}
        rotation={[Math.PI / 2, 0, -2.05]}
      />
      <mesh
        geometry={nodes.Under_feet.geometry}
        material={materials.Midsole}
        material-color={useMaterialColorValue().midsole?.color}
        position={[-0.26, -0.78, -0.04]}
        rotation={[0, -1.57, 0]}
      />
      <mesh
        geometry={nodes.Under_Sole_Plate.geometry}
        material={materials.Sole}
        material-color={useMaterialColorValue().sole?.color}
        position={[-0.33, -1.04, 0.01]}
        rotation={[Math.PI / 2, 0, -2.05]}
      />
    </group>
  );
};

useGLTF.preload(MODEL_PATH);
